version: '3.8'

services:
  # Main Postgres for core services
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: library
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin123
      KEYCLOAK_DB: keycloak
      KEYCLOAK_USER: keycloak
      KEYCLOAK_PASSWORD: keycloak
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - 5432:5432
    networks:
      - library-network

  # Dedicated Postgres for borrow-service
  borrow-postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: borrowdb
      POSTGRES_USER: borrow_service_user
      POSTGRES_PASSWORD: borrowpass
    volumes:
      - borrow_postgres_data:/var/lib/postgresql/data
      - ./init_borrowdb.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - 5433:5432
    networks:
      - library-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - library-network

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - library-network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8081:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    depends_on:
      - kafka
      - zookeeper
    networks:
      - library-network

  # PgAdmin for DB management
  pgadmin:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: adminadmin123
    ports:
      - "5050:80"
    depends_on:
      - postgres
      - borrow-postgres
    networks:
      - library-network

  # Service Discovery
  discovery-service:
    build: discovery-service
    ports:
      - 8761:8761
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - library-network

  # API Gateway
  api-gateway:
    build: api-gateway
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - KEYCLOAK_URL=http://keycloak:8080
      - EUREKA_URL=http://discovery-service:8761/eureka
    ports:
      - "8080:8080"
    depends_on:
      - discovery-service
      - keycloak
    networks:
      - library-network

  # Keycloak for authentication
  keycloak:
    image: quay.io/keycloak/keycloak:24.0
    environment:
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin
      - KC_DB=postgres
      - KC_DB_URL=jdbc:postgresql://postgres:5432/keycloak
      - KC_DB_USERNAME=keycloak
      - KC_DB_PASSWORD=keycloak
      - KC_HOSTNAME=keycloak
      - KC_HOSTNAME_PORT=8080
      - KC_HOSTNAME_STRICT=false
    volumes:
      - ./keycloak/import:/opt/keycloak/data/import
    command: start-dev --import-realm
    ports:
      - "8090:8080"
    depends_on:
      - postgres
    networks:
      - library-network

  # User Service
  user-service:
    build: user-service
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/library?currentSchema=users
      - SPRING_DATASOURCE_USERNAME=user_service
      - SPRING_DATASOURCE_PASSWORD=userpass
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_URL=http://discovery-service:8761/eureka
    depends_on:
      - postgres
      - discovery-service
    networks:
      - library-network

  # Auth Service
  auth-service:
    build: auth-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_URL=http://discovery-service:8761/eureka
      - KEYCLOAK_URL=http://keycloak:8080 
    depends_on:
      - postgres
      - discovery-service
      - user-service
    networks:
      - library-network

  # Book Service
  book-service:
    build:
      context: ./book-service
      dockerfile: Dockerfile
    image: librarysystem/book-service
    container_name: book-service
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/library?currentSchema=books
      - SPRING_DATASOURCE_USERNAME=book_service_user
      - SPRING_DATASOURCE_PASSWORD=bookpass
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-service:8761/eureka/
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update 
    depends_on:
      - discovery-service
      - postgres
    networks:
      - library-network

  # Borrow Service
  borrow-service:
    build: borrow-service
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://borrow-postgres:5432/borrowdb
      - SPRING_DATASOURCE_USERNAME=borrow_service_user
      - SPRING_DATASOURCE_PASSWORD=borrowpass
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-service:8761/eureka/
    depends_on:
      - borrow-postgres
      - discovery-service
    networks:
      - library-network

volumes:
  postgres_data:
  borrow_postgres_data:

networks:
  library-network:
    driver: bridge